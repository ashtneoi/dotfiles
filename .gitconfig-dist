[core]
	editor = vim
	excludesfile = ~/.gitexcludes
[push]
	default = simple
	followTags = true
[user]
	name = NAME
	email = EMAIL
[color]
	ui = true
[diff]
	tool = meld
[alias]
	amend = commit --amend --no-edit
	br = "!f() { git branch --list -r $1/'*'; }; f"
	co = checkout
	cob = checkout --no-track -b
	cor = "!f() { git fetch ${1-origin} && git checkout ${1-origin}/${2-master}; }; f"
	conflicts = diff --name-only --diff-filter=U
	d = diff
	dc = diff --cached
	down = pull --ff-only
	downr = pull --rebase
	ff = merge --ff-only
	h = rev-parse HEAD
	initial = commit -o --allow-empty -m'Initial commit (empty)' -e
	lg = log --graph --all --decorate
	# Courtesy of Andrew Berry; seen on http://www.lullabot.com/blog/article/handling-git-pull-automatic-merges
	lg2 = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit
	push-new = "!f() { [ $# -ge 1 ] || { echo wrong && return 1; }; git push --set-upstream $1 $(git rev-parse --abbrev-ref HEAD); }; f"
	s = status -bs -uno
	sl = status -b -uno
	temp = !git commit -am 'temp '$(date +%Y-%m-%dT%H:%M:%S%z)
	tinylog = log --first-parent --pretty='format:%h %ci: %s'
	trash = !cd ./$GIT_PREFIX && git clean -dxn | cut -f3- -d' '
	untracked = ls-files --others --exclude-standard --directory
[merge]
	conflictstyle = diff3
	tool = meld
[advice]
	statusHints = false
	detachedHead = false
	resolveConflict = false
